// 引入ComposingBuild包名
import com.example.version_plugin.ComposingAndroidX
import com.example.version_plugin.ComposingBuildVersions
import com.example.version_plugin.ComposingDependencies
import com.example.version_plugin.ComposingJetpack

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    // ComposingBuild依赖插件
    id 'version-plugin'
}

apply plugin: 'kotlin-android'

android {
    namespace 'com.liang.newbaseproject'

//    compileSdk 32
//    // Google-ext依赖
//    compileSdk rootProject.ext.android.compileSdk

//    // 使用buildSrc统一版本依赖
//    compileSdk BuildVersions.compileSdk

    // ComposingBuild-使用Plugin中声明的三方库
    compileSdk ComposingBuildVersions.compileSdk

    defaultConfig {
//        applicationId "com.liang.newbaseproject"
//        minSdk 21
//        targetSdk 33
//        versionCode 1
//        versionName "1.0"

//        // Google-ext依赖
//        minSdk rootProject.ext.android.minSdk
//        targetSdk rootProject.ext.android.targetSdk
//        versionCode rootProject.ext.android.versionCode
//        versionName rootProject.ext.android.versionName

        // ComposingBuild-使用Plugin中声明的三方库
        applicationId ComposingBuildVersions.applicationId
        minSdk ComposingBuildVersions.minSdk
        targetSdk ComposingBuildVersions.targetSdk
        versionCode ComposingBuildVersions.versionCode
        versionName ComposingBuildVersions.versionName

//        // 使用buildSrc统一版本依赖
//        applicationId BuildVersions.applicationId
//        minSdk BuildVersions.minSdk
//        targetSdk BuildVersions.targetSdk
//        versionCode BuildVersions.versionCode
//        versionName BuildVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Room配置编译器选项（可选）,在app的build.gradle中的defaultConfig标签下添加依赖：
        // 1、"room.schemaLocation":"$projectDir/schemas".toString(): 的作用是将配置并启把据库架构导出json文件到指定目录
        // 如果配置了schemaLocation，编译后，会在对应路径生成schemas文件夹，json包含了各个版本的概要，表结构等信息.
        // 如果在创建数据库的时候未指定具体位置生成的位置则是在 data/data/包名/database 下，
        // 如果需要指定额外的位置则在上文数据库构建的时候传数据库名前面带上你需要指定的路径。
        // 2、"room.incremental":"true":启用 Gradle 增量注解处理器。
        // 3、"room.expandProjection":"true": 配置 Room 以重写查询，使其顶部星形投影在展开后仅包含 DAO 方法返回类型中定义的列
        // 注意：配置完成后，我们的项目中会存在多个json文件，这个是本地数据库各个版本的sql语句，请注意，这些json文件需要保存不能删除，否则下次升级会找不到上个数据库的文件，导致自动升级失败
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // 开启dataBinding
    buildFeatures {
        dataBinding true
    }
    // 开启viewBinding
    viewBinding {
        enabled = true
    }
}

dependencies {
//    implementation 'androidx.core:core-ktx:1.8.0'
//    implementation 'androidx.appcompat:appcompat:1.4.1'
//    implementation 'com.google.android.material:material:1.5.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    /////////////////////////////Google-ext依赖声明的三方库////////////////////////////////////////

//    // ----------- Android-------------
//    implementation rootProject.ext.dependencies.coreKtx
//    implementation rootProject.ext.dependencies.appcompat
//    implementation rootProject.ext.dependencies.material
//    implementation rootProject.ext.dependencies.constraintlayout
//    implementation rootProject.ext.dependencies.junit
//    implementation rootProject.ext.dependencies.junitExt
//    implementation rootProject.ext.dependencies.espresso
//
////    // 协程库，因为Flow是构建在Kotlin协程基础之上的，因此协程依赖库必不可少
////    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
////    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
//
//    //----------- Jetpack----------------
//    // ViewModelScope
//    implementation rootProject.ext.dependencies.viewModelKtx
//    // LifecycleScope提供协程作用域的，同样必不可少
//    implementation rootProject.ext.dependencies.lifecycleScope
//    // liveData
//    implementation rootProject.ext.dependencies.liveDataKtx
//    // ktx的扩展库，这些倒不是必须的，但是能帮忙我们简化不少代码的书写
//    implementation rootProject.ext.dependencies.activityKtx
//    implementation rootProject.ext.dependencies.fragmentKtx
//    // 协程库，因为Flow是构建在Kotlin协程基础之上的，因此协程依赖库必不可少
//    implementation rootProject.ext.dependencies.coroutinesCore
//    implementation rootProject.ext.dependencies.coroutinesAndroid
//    // UnPeek-LiveData解决数据倒灌
//    implementation rootProject.ext.dependencies.unPeekLiveData
//
//    //---------------网络相关------------------
//    implementation rootProject.ext.dependencies.retrofit
//    implementation rootProject.ext.dependencies.converterGson
//    implementation rootProject.ext.dependencies.loggingInterceptor
//    implementation rootProject.ext.dependencies.persistentCookieJar
//    implementation rootProject.ext.dependencies.gson

    /////////////////////////////ComposingBuild-使用Plugin中声明的三方库////////////////////////////////////////

//    // ----------- Android-------------
//    implementation(ComposingAndroidX.coreKtx)
//    implementation(ComposingAndroidX.appcompat)
//    implementation(ComposingAndroidX.material)
//    implementation(ComposingAndroidX.constraintLayout)
//    implementation(ComposingAndroidX.junit)
//    implementation(ComposingAndroidX.junitExt)
//    implementation(ComposingAndroidX.espresso)
//
//    //----------- Jetpack----------------
//    // ViewModelScope
//    implementation(ComposingJetpack.viewModelKtx)
//    // LifecycleScope提供协程作用域的，同样必不可少
//    implementation(ComposingJetpack.lifecycleScope)
//    // liveData
//    implementation(ComposingJetpack.liveDataKtx)
//    // ktx的扩展库，这些倒不是必须的，但是能帮忙我们简化不少代码的书写
//    implementation(ComposingJetpack.activityKtx)
//    implementation(ComposingJetpack.fragmentKtx)
//    // 协程库，因为Flow是构建在Kotlin协程基础之上的，因此协程依赖库必不可少
//    implementation(ComposingJetpack.coroutinesCore)
//    implementation(ComposingJetpack.coroutinesAndroid)
//    // UnPeek-LiveData解决数据倒灌
//    implementation(ComposingJetpack.unPeekLiveData)
//
//    //---------------网络相关------------------
//    implementation(ComposingDependencies.retrofit)
//    implementation(ComposingDependencies.converterGson)
//    implementation(ComposingDependencies.loggingInterceptor)
//    implementation(ComposingDependencies.persistentCookieJar)
//    implementation(ComposingDependencies.gson)

//    /////////////////////////////使用buildSrc统一版本依赖////////////////////////////////////////
//
//    // ----------- Android-------------
//    implementation(AndroidX.coreKtx)
//    implementation(AndroidX.appcompat)
//    implementation(AndroidX.material)
//    implementation(AndroidX.constraintLayout)
//    implementation(AndroidX.junit)
//    implementation(AndroidX.junitExt)
//    implementation(AndroidX.espresso)
//
//    //    //----------- Jetpack----------------
//    // ViewModelScope
//    implementation(Jetpack.viewModelKtx)
//    // LifecycleScope提供协程作用域的，同样必不可少
//    implementation(Jetpack.lifecycleScope)
//    // liveData
//    implementation(Jetpack.liveDataKtx)
//    // ktx的扩展库，这些倒不是必须的，但是能帮忙我们简化不少代码的书写
//    implementation(Jetpack.activityKtx)
//    implementation(Jetpack.fragmentKtx)
//    // 协程库，因为Flow是构建在Kotlin协程基础之上的，因此协程依赖库必不可少
//    implementation(Jetpack.coroutinesCore)
//    implementation(Jetpack.coroutinesAndroid)
//    // UnPeek-LiveData解决数据倒灌
//    implementation(Jetpack.unPeekLiveData)
//
//    //---------------网络相关------------------
//    implementation(CommonDependencies.retrofit)
//    implementation(CommonDependencies.converterGson)
//    implementation(CommonDependencies.loggingInterceptor)
//    implementation(CommonDependencies.persistentCookieJar)
//    implementation(CommonDependencies.gson)

    implementation project(path: ':module_base')
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

//    kapt(Jetpack.roomCompiler)

    // ComposingBuild-使用Plugin中声明的三方库-Room
    kapt(ComposingJetpack.roomCompiler)
}