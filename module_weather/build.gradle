// 引入ComposingBuild包名
import com.example.version_plugin.ComposingAndroidX
import com.example.version_plugin.ComposingBuildVersions
import com.example.version_plugin.ComposingDependencies
import com.example.version_plugin.ComposingJetpack

plugins {
//    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    // ComposingBuild依赖插件
    id 'version-plugin'
}

// only buildscript {}, pluginManagement {} and other plugins {} script blocks are allowed before plugins {} blocks, no other statements are allowed
if (isModuleWeatherBuildModule.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}

//ARouter配置
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    namespace 'com.liang.module_weather'
//    compileSdk 34

    // ComposingBuild-使用Plugin中声明的三方库
    compileSdk ComposingBuildVersions.compileSdk

    defaultConfig {
//        applicationId "com.liang.module_weather"
//        minSdk 24
//        targetSdk 34
//        versionCode 1
//        versionName "1.0"

        if (isModuleWeatherBuildModule.toBoolean()) {
            applicationId "com.liang.module_weather"
        }

        minSdk ComposingBuildVersions.minSdk
        targetSdk ComposingBuildVersions.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        // 在代码中读取gradle.propeties
        // 1、在gradle.properties中添加属性 isModuleWeatherBuildModule=false
        // 2、在build.gradle文件中的android 下的 defaultConfig中定义如下：String要加转移符  Boolean不需要,注意此方式也可以读取build.gradle中的定义的变量
        // Java代码中引用的定义形式-举例
        // buildConfigField "String", "CUR_PROJECT", "\"${CUR_PROJECT}\""
        //    buildConfigField "Boolean", "DEBUG_TAG", "${DEBUG_TAG}"
        //    buildConfigField "String", "DEBUG_LOGIN_SN", "\"${DEBUG_LOGIN_SN}\""
        //    buildConfigField "String", "DEBUG_LOGIN_MODEL", "\"${DEBUG_LOGIN_MODEL}\""
        //    buildConfigField "String", "DEBUG_LOGIN_VENDOR", "\"${DEBUG_LOGIN_VENDOR}\""
        //    buildConfigField "String", "DEBUG_LOGIN_TYPE", "\"${DEBUG_LOGIN_TYPE}\""
        //    buildConfigField "String", "SERVER_UP_URL", "\"${SERVER_UP_URL}\""
        //    buildConfigField "String", "VIDEO_EXTRANET_IP", "\"${VIDEO_EXTRANET_IP}\""
        //    buildConfigField "String", "LOAD_H5_UP", "\"${LOAD_H5_UP}\""
        //    buildConfigField "String", "TIME_SERVER_IP", "\"${TIME_SERVER_IP}\""
        //    buildConfigField "Boolean", "SUPPORT_TIMESHIFT", "${SUPPORT_TIMESHIFT}"
        //    buildConfigField "Boolean", "IS_USE_IJKPLAYER_FOR_VOD", "${IS_USE_IJKPLAYER_FOR_VOD}"

        // weather模块是否独立module
        buildConfigField "Boolean", "isModuleWeatherBuildModule", "${isModuleWeatherBuildModule}"


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // 开启dataBinding
    buildFeatures {
        dataBinding true
    }
    // 开启viewBinding
    viewBinding {
        enabled = true
    }

    // 配置清单文件,位置需要复制一份当前的清单文件到main/alone(可以随便取)目录下,在清单文件中提供入口
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isModuleWeatherBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/alone/*'
                }
            }
        }
    }

    //统一资源前缀，规范资源引用
    // 设置了resourcePrefix值后，所有的资源名必须以指定的字符串做前缀，否则会报错。
    // 但是resourcePrefix这个值只能限定xml里面的资源，并不能限定图片资源，所有图片资源仍然需要手动去修改资源名
    resourcePrefix "weather_"
}

dependencies {
//    implementation 'androidx.core:core-ktx:1.10.1'
//    implementation 'androidx.appcompat:appcompat:1.6.1'
//    implementation 'com.google.android.material:material:1.9.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation project(path: ':module_base')
    implementation project(path: ':module_route')
    implementation project(':module_ui')

    // ARoute路由
    kapt(ComposingDependencies.aRouterCompiler)
}